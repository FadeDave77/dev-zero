"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const config_1 = require("../../config");
const warns_1 = require("../../models/warns");
class WarnCommand extends discord_akairo_1.Command {
    constructor() {
        super('warn', {
            aliases: ['warn', 'warning'],
            category: 'moderation',
            description: {
                content: 'Warn users who are doing bad things.',
                usage: 'warn <member> (reason)',
                examples: ['warn @FadeDave#7005 he is a naughty boi'] //exampleArray
            },
            ratelimit: 3,
            channel: 'guild',
            userPermissions: ['MANAGE_MESSAGES'],
            args: [
                {
                    id: 'member',
                    type: 'member',
                    prompt: {
                        start: (msg) => `Provide a member to warn, ${msg.author}:`,
                        retry: (msg) => `Provide a valid member to warn, ${msg.author}:`
                    }
                },
                {
                    id: 'reason',
                    type: 'string',
                    match: 'rest',
                    default: 'None'
                }
            ]
        });
    }
    async exec(message, { member, reason }) {
        const warnRepo = this.client.db.getRepository(warns_1.Warns);
        if (member.roles.highest.position >= message.member.roles.highest.position && message.author.id !== (message.guild.ownerID && config_1.OwnerId))
            return message.util.reply('The member you are trying to warn, has higher or equal roles to you!');
        await warnRepo.insert({
            guild: message.guild.id,
            user: member.id,
            moderator: message.author.id,
            time: (Math.round((Date.now()) / 1000)),
            reason: reason
        });
        return message.util.send(`**${member.user.tag}** has been warned by **${message.author.tag}**, with reason \`${reason}\`.`);
    }
    ;
}
exports.default = WarnCommand;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Fybi1jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL21vZGVyYXRpb24vd2Fybi1jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlDO0FBR3pDLHlDQUF1QztBQUV2Qyw4Q0FBMkM7QUFFM0MsTUFBcUIsV0FBWSxTQUFRLHdCQUFPO0lBQzVDO1FBQ0ksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNWLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUM7WUFDNUIsUUFBUSxFQUFFLFlBQVk7WUFDdEIsV0FBVyxFQUFFO2dCQUNULE9BQU8sRUFBRSxzQ0FBc0M7Z0JBQy9DLEtBQUssRUFBRSx3QkFBd0I7Z0JBQy9CLFFBQVEsRUFBRSxDQUFDLHlDQUF5QyxDQUFDLENBQUMsY0FBYzthQUN2RTtZQUNELFNBQVMsRUFBRSxDQUFDO1lBQ1osT0FBTyxFQUFFLE9BQU87WUFDaEIsZUFBZSxFQUFFLENBQUMsaUJBQWlCLENBQUM7WUFDcEMsSUFBSSxFQUFFO2dCQUNGO29CQUNJLEVBQUUsRUFBRSxRQUFRO29CQUNaLElBQUksRUFBRSxRQUFRO29CQUNkLE1BQU0sRUFBRTt3QkFDSixLQUFLLEVBQUUsQ0FBQyxHQUFZLEVBQUUsRUFBRSxDQUFDLDZCQUE2QixHQUFHLENBQUMsTUFBTSxHQUFHO3dCQUNuRSxLQUFLLEVBQUUsQ0FBQyxHQUFZLEVBQUUsRUFBRSxDQUFDLG1DQUFtQyxHQUFHLENBQUMsTUFBTSxHQUFHO3FCQUM1RTtpQkFDSjtnQkFDRDtvQkFDSSxFQUFFLEVBQUUsUUFBUTtvQkFDWixJQUFJLEVBQUUsUUFBUTtvQkFDZCxLQUFLLEVBQUUsTUFBTTtvQkFDYixPQUFPLEVBQUUsTUFBTTtpQkFDbEI7YUFDSjtTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWdCLEVBQUUsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUEyQztRQUMxRixNQUFNLFFBQVEsR0FBc0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQUssQ0FBQyxDQUFDO1FBQ3hFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxnQkFBTyxDQUFDO1lBQ2xJLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztRQUN0RyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDbEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN2QixJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDZixTQUFTLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzVCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUN2QyxNQUFNLEVBQUUsTUFBTTtTQUNqQixDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLDJCQUEyQixPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcscUJBQXFCLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFDaEksQ0FBQztJQUFBLENBQUM7Q0FDTDtBQTVDRCw4QkE0Q0M7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJ2Rpc2NvcmQtYWthaXJvJztcbmltcG9ydCB7TWVzc2FnZSwgR3VpbGRNZW1iZXIsIE1lc3NhZ2VFbWJlZCwgSW1hZ2VTaXplLCBUZXh0Q2hhbm5lbCwgTWVzc2FnZUF0dGFjaG1lbnR9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHtSZXBvc2l0b3J5fSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IE93bmVySWQgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuXG5pbXBvcnQgeyBXYXJucyB9IGZyb20gJy4uLy4uL21vZGVscy93YXJucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhcm5Db21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignd2FybicsIHsgLy9uYW1lXG4gICAgICAgICAgICBhbGlhc2VzOiBbJ3dhcm4nLCAnd2FybmluZyddLCAvL2FsaWFzZXNcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnbW9kZXJhdGlvbicsIC8vY2F0ZWdvcnkgb2YgY29tbWFuZFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnV2FybiB1c2VycyB3aG8gYXJlIGRvaW5nIGJhZCB0aGluZ3MuJywgLy9kZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgIHVzYWdlOiAnd2FybiA8bWVtYmVyPiAocmVhc29uKScsIC8vaG93IHRvIHVzZVxuICAgICAgICAgICAgICAgIGV4YW1wbGVzOiBbJ3dhcm4gQEZhZGVEYXZlIzcwMDUgaGUgaXMgYSBuYXVnaHR5IGJvaSddIC8vZXhhbXBsZUFycmF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmF0ZWxpbWl0OiAzLCAvL2hvdyBtYW55IHRpbWVzIGNhbiB5b3UgZXhlY3V0ZSAvIG1pbnV0ZVxuICAgICAgICAgICAgY2hhbm5lbDogJ2d1aWxkJyxcbiAgICAgICAgICAgIHVzZXJQZXJtaXNzaW9uczogWydNQU5BR0VfTUVTU0FHRVMnXSxcbiAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiAnbWVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21lbWJlcicsXG4gICAgICAgICAgICAgICAgICAgIHByb21wdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IChtc2c6IE1lc3NhZ2UpID0+IGBQcm92aWRlIGEgbWVtYmVyIHRvIHdhcm4sICR7bXNnLmF1dGhvcn06YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5OiAobXNnOiBNZXNzYWdlKSA9PiBgUHJvdmlkZSBhIHZhbGlkIG1lbWJlciB0byB3YXJuLCAke21zZy5hdXRob3J9OmBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBpZDogJ3JlYXNvbicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBtYXRjaDogJ3Jlc3QnLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAnTm9uZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlLCB7bWVtYmVyLCByZWFzb259OiB7IG1lbWJlcjogR3VpbGRNZW1iZXIsIHJlYXNvbiA6IHN0cmluZyB9KTogUHJvbWlzZTxNZXNzYWdlPiB7XG4gICAgICAgIGNvbnN0IHdhcm5SZXBvOiBSZXBvc2l0b3J5PFdhcm5zPiA9IHRoaXMuY2xpZW50LmRiLmdldFJlcG9zaXRvcnkoV2FybnMpO1xuICAgICAgICBpZiAobWVtYmVyLnJvbGVzLmhpZ2hlc3QucG9zaXRpb24gPj0gbWVzc2FnZS5tZW1iZXIucm9sZXMuaGlnaGVzdC5wb3NpdGlvbiAmJiBtZXNzYWdlLmF1dGhvci5pZCAhPT0gKG1lc3NhZ2UuZ3VpbGQub3duZXJJRCAmJiBPd25lcklkKSlcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLnV0aWwucmVwbHkoJ1RoZSBtZW1iZXIgeW91IGFyZSB0cnlpbmcgdG8gd2FybiwgaGFzIGhpZ2hlciBvciBlcXVhbCByb2xlcyB0byB5b3UhJyk7XG4gICAgICAgIGF3YWl0IHdhcm5SZXBvLmluc2VydCh7XG4gICAgICAgICAgICBndWlsZDogbWVzc2FnZS5ndWlsZC5pZCxcbiAgICAgICAgICAgIHVzZXI6IG1lbWJlci5pZCxcbiAgICAgICAgICAgIG1vZGVyYXRvcjogbWVzc2FnZS5hdXRob3IuaWQsXG4gICAgICAgICAgICB0aW1lOiAoTWF0aC5yb3VuZCgoRGF0ZS5ub3coKSkgLyAxMDAwKSksXG4gICAgICAgICAgICByZWFzb246IHJlYXNvblxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudXRpbC5zZW5kKGAqKiR7bWVtYmVyLnVzZXIudGFnfSoqIGhhcyBiZWVuIHdhcm5lZCBieSAqKiR7bWVzc2FnZS5hdXRob3IudGFnfSoqLCB3aXRoIHJlYXNvbiBcXGAke3JlYXNvbn1cXGAuYCk7XG4gICAgfTtcbn07XG4iXX0=