"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const discord_js_2 = __importDefault(require("discord.js"));
class MessageDeleteListener extends discord_akairo_1.Listener {
    constructor() {
        super('messageDelete', {
            event: 'messageDelete',
            emitter: 'client',
            category: 'client'
        });
    }
    async exec(message) {
        if (message.partial || message.author.bot)
            return;
        await discord_js_2.default.Util.delayFor(1000);
        let logs = await message.guild.fetchAuditLogs({ type: 72, limit: 6 });
        let entry = logs.entries.find(a => new discord_js_1.User(this.client, a.target).id === message.author.id && Date.now() - a.createdTimestamp <= 200000);
        const executor = entry ? entry.executor : null;
        const executortag = entry ? entry.executor.tag : null;
        const executorid = entry ? entry.executor.id : null;
        const channel = message.guild.channels.cache.find(c => c.name.toLowerCase() === 'dev-zero');
        return channel.send(new discord_js_1.MessageEmbed()
            .setAuthor(`Message Deleted | Content:`, message.author.displayAvatarURL({ dynamic: true }))
            .setDescription(message.content)
            .setColor(0xff0000)
            .addField('Author:', `${message.author} *${message.author.tag}* \`${message.author.id}\``)
            .addField('Channel:', `${message.channel} \`${message.channel.id}\``)
            .addField('Executor:', executor ? `${executor} *${executortag}* \`${executorid}\`` : `Executor unknown.`)
            .setThumbnail(message.author.displayAvatarURL({ dynamic: true })));
    }
}
exports.default = MessageDeleteListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZWRlbGV0ZS1saXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saXN0ZW5lcnMvY2xpZW50L21lc3NhZ2VkZWxldGUtbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtREFBMEM7QUFDMUMsMkNBQWlIO0FBQ2pILDREQUFpQztBQUVqQyxNQUFxQixxQkFBc0IsU0FBUSx5QkFBUTtJQUN2RDtRQUNJLEtBQUssQ0FBQyxlQUFlLEVBQUU7WUFDbkIsS0FBSyxFQUFFLGVBQWU7WUFDdEIsT0FBTyxFQUFFLFFBQVE7WUFDakIsUUFBUSxFQUFFLFFBQVE7U0FDckIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUlNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRztZQUFFLE9BQU87UUFDbEQsTUFBTSxvQkFBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEMsSUFBSSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDcEUsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDOUIsSUFBSSxpQkFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixJQUFJLE1BQU0sQ0FDeEcsQ0FBQTtRQUNELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQy9DLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN0RCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFcEQsTUFBTSxPQUFPLEdBQWdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLFVBQVUsQ0FBZ0IsQ0FBQztRQUV2SCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSx5QkFBWSxFQUFFO2FBQ2pDLFNBQVMsQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7YUFDekYsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7YUFDL0IsUUFBUSxDQUFDLFFBQVEsQ0FBQzthQUNsQixRQUFRLENBQUMsU0FBUyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDO2FBQ3pGLFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxPQUFPLENBQUMsT0FBTyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUM7YUFDcEUsUUFBUSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxLQUFLLFdBQVcsT0FBTyxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUM7YUFDeEcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUNqRSxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBbkNELHdDQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpc3RlbmVyIH0gZnJvbSAnZGlzY29yZC1ha2Fpcm8nO1xuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUVtYmVkLCBUZXh0Q2hhbm5lbCwgVXNlciwgQ2hhbm5lbCwgR3VpbGRNZW1iZXIsIEd1aWxkLCBHdWlsZENoYW5uZWwgfSBmcm9tICdkaXNjb3JkLmpzJztcbmltcG9ydCBEaXNjb3JkIGZyb20gJ2Rpc2NvcmQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZXNzYWdlRGVsZXRlTGlzdGVuZXIgZXh0ZW5kcyBMaXN0ZW5lciB7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignbWVzc2FnZURlbGV0ZScsIHtcbiAgICAgICAgICAgIGV2ZW50OiAnbWVzc2FnZURlbGV0ZScsXG4gICAgICAgICAgICBlbWl0dGVyOiAnY2xpZW50JyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiAnY2xpZW50J1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG4gICAgcHVibGljIGFzeW5jIGV4ZWMobWVzc2FnZTogTWVzc2FnZSk6IFByb21pc2U8TWVzc2FnZT4ge1xuICAgICAgICBpZiAobWVzc2FnZS5wYXJ0aWFsIHx8IG1lc3NhZ2UuYXV0aG9yLmJvdCkgcmV0dXJuO1xuICAgICAgICBhd2FpdCBEaXNjb3JkLlV0aWwuZGVsYXlGb3IoMTAwMCk7XG5cbiAgICAgICAgbGV0IGxvZ3MgPSBhd2FpdCBtZXNzYWdlLmd1aWxkLmZldGNoQXVkaXRMb2dzKHt0eXBlOiA3MiwgbGltaXQ6IDZ9KTtcbiAgICAgICAgbGV0IGVudHJ5ID0gbG9ncy5lbnRyaWVzLmZpbmQoYSA9PlxuICAgICAgICAgICAgbmV3IFVzZXIodGhpcy5jbGllbnQsIGEudGFyZ2V0KS5pZCA9PT0gbWVzc2FnZS5hdXRob3IuaWQgJiYgRGF0ZS5ub3coKSAtIGEuY3JlYXRlZFRpbWVzdGFtcCA8PSAyMDAwMDBcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBleGVjdXRvciA9IGVudHJ5ID8gZW50cnkuZXhlY3V0b3IgOiBudWxsO1xuICAgICAgICBjb25zdCBleGVjdXRvcnRhZyA9IGVudHJ5ID8gZW50cnkuZXhlY3V0b3IudGFnIDogbnVsbDtcbiAgICAgICAgY29uc3QgZXhlY3V0b3JpZCA9IGVudHJ5ID8gZW50cnkuZXhlY3V0b3IuaWQgOiBudWxsO1xuXG4gICAgICAgIGNvbnN0IGNoYW5uZWw6IFRleHRDaGFubmVsID0gbWVzc2FnZS5ndWlsZC5jaGFubmVscy5jYWNoZS5maW5kKGM9PiBjLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Rldi16ZXJvJykgYXMgVGV4dENoYW5uZWw7XG5cbiAgICAgICAgcmV0dXJuIGNoYW5uZWwuc2VuZChuZXcgTWVzc2FnZUVtYmVkKClcbiAgICAgICAgICAgIC5zZXRBdXRob3IoYE1lc3NhZ2UgRGVsZXRlZCB8IENvbnRlbnQ6YCwgbWVzc2FnZS5hdXRob3IuZGlzcGxheUF2YXRhclVSTCh7ZHluYW1pYzogdHJ1ZX0pKVxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKG1lc3NhZ2UuY29udGVudClcbiAgICAgICAgICAgIC5zZXRDb2xvcigweGZmMDAwMClcbiAgICAgICAgICAgIC5hZGRGaWVsZCgnQXV0aG9yOicsIGAke21lc3NhZ2UuYXV0aG9yfSAqJHttZXNzYWdlLmF1dGhvci50YWd9KiBcXGAke21lc3NhZ2UuYXV0aG9yLmlkfVxcYGApXG4gICAgICAgICAgICAuYWRkRmllbGQoJ0NoYW5uZWw6JywgYCR7bWVzc2FnZS5jaGFubmVsfSBcXGAke21lc3NhZ2UuY2hhbm5lbC5pZH1cXGBgKVxuICAgICAgICAgICAgLmFkZEZpZWxkKCdFeGVjdXRvcjonLCBleGVjdXRvciA/IGAke2V4ZWN1dG9yfSAqJHtleGVjdXRvcnRhZ30qIFxcYCR7ZXhlY3V0b3JpZH1cXGBgIDogYEV4ZWN1dG9yIHVua25vd24uYClcbiAgICAgICAgICAgIC5zZXRUaHVtYm5haWwobWVzc2FnZS5hdXRob3IuZGlzcGxheUF2YXRhclVSTCh7ZHluYW1pYzp0cnVlfSkpXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19