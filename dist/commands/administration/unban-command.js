"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
class UnbanCommand extends discord_akairo_1.Command {
    constructor() {
        super('unban', {
            aliases: ['unban', 'unyeet'],
            category: 'administration',
            description: {
                content: 'Remove a previous ban.',
                usage: 'unban <user>',
                examples: ['unban 347822600136949763'] //exampleArray
            },
            userPermissions: ['BAN_MEMBERS'],
            channel: 'guild',
            ratelimit: 6,
            args: [
                {
                    id: 'user',
                    type: 'bigint',
                    prompt: {
                        start: (msg) => `Provide a user to unban, ${msg.author}:`,
                        retry: (msg) => `Provide a valid user to unban, ${msg.author}:`
                    }
                }
            ]
        });
    }
    async exec(message, user) {
        let User = String(user['user']);
        await message.guild.fetchBans().then(async (bans) => {
            if (bans.size == 0 || bans.find(u => u.user.id != User))
                return message.util.send('No ban with the specified ID exists.');
            else
                message.guild.members.unban(User);
            return message.channel.send(`${User} unbanned succesfully.`);
        });
    }
    ;
}
exports.default = UnbanCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5iYW4tY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9hZG1pbmlzdHJhdGlvbi91bmJhbi1jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlDO0FBS3pDLE1BQXFCLFlBQWEsU0FBUSx3QkFBTztJQUM3QztRQUNJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDWCxPQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDO1lBQzVCLFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsV0FBVyxFQUFFO2dCQUNULE9BQU8sRUFBRSx3QkFBd0I7Z0JBQ2pDLEtBQUssRUFBRSxjQUFjO2dCQUNyQixRQUFRLEVBQUUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLGNBQWM7YUFDeEQ7WUFDRCxlQUFlLEVBQUUsQ0FBQyxhQUFhLENBQUM7WUFDaEMsT0FBTyxFQUFFLE9BQU87WUFDaEIsU0FBUyxFQUFFLENBQUM7WUFDWixJQUFJLEVBQUU7Z0JBQ0Y7b0JBQ0ksRUFBRSxFQUFDLE1BQU07b0JBQ1QsSUFBSSxFQUFDLFFBQVE7b0JBQ2IsTUFBTSxFQUFFO3dCQUNKLEtBQUssRUFBRSxDQUFDLEdBQVksRUFBRSxFQUFFLENBQUMsNEJBQTRCLEdBQUcsQ0FBQyxNQUFNLEdBQUc7d0JBQ2xFLEtBQUssRUFBRSxDQUFDLEdBQVksRUFBRSxFQUFFLENBQUMsa0NBQWtDLEdBQUcsQ0FBQyxNQUFNLEdBQUc7cUJBQzNFO2lCQUNKO2FBQ0o7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFnQixFQUFFLElBQVk7UUFDNUMsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBQy9CLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFDLElBQUksRUFBQSxFQUFFO1lBQzdDLElBQUcsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQztnQkFBRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7O2dCQUNwSCxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFBQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3pHLENBQUMsQ0FBQyxDQUFDO0lBRVAsQ0FBQztJQUFBLENBQUM7Q0FDTDtBQWpDRCwrQkFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnZGlzY29yZC1ha2Fpcm8nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHtNZXNzYWdlLCBHdWlsZE1lbWJlciwgTWVzc2FnZUVtYmVkLCBJbWFnZVNpemUsIFRleHRDaGFubmVsLCBNZXNzYWdlQXR0YWNobWVudH0gZnJvbSAnZGlzY29yZC5qcyc7XG5pbXBvcnQge093bmVySWR9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVuYmFuQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3VuYmFuJywgeyAvL25hbWVcbiAgICAgICAgICAgIGFsaWFzZXM6IFsndW5iYW4nLCAndW55ZWV0J10sIC8vYWxpYXNlc1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdhZG1pbmlzdHJhdGlvbicsIC8vY2F0ZWdvcnkgb2YgY29tbWFuZFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnUmVtb3ZlIGEgcHJldmlvdXMgYmFuLicsIC8vZGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgICB1c2FnZTogJ3VuYmFuIDx1c2VyPicsIC8vaG93IHRvIHVzZVxuICAgICAgICAgICAgICAgIGV4YW1wbGVzOiBbJ3VuYmFuIDM0NzgyMjYwMDEzNjk0OTc2MyddIC8vZXhhbXBsZUFycmF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zOiBbJ0JBTl9NRU1CRVJTJ10sXG4gICAgICAgICAgICBjaGFubmVsOiAnZ3VpbGQnLFxuICAgICAgICAgICAgcmF0ZWxpbWl0OiA2LCAvL2hvdyBtYW55IHRpbWVzIGNhbiB5b3UgZXhlY3V0ZSAvIG1pbnV0ZVxuICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6J3VzZXInLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOidiaWdpbnQnLFxuICAgICAgICAgICAgICAgICAgICBwcm9tcHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAobXNnOiBNZXNzYWdlKSA9PiBgUHJvdmlkZSBhIHVzZXIgdG8gdW5iYW4sICR7bXNnLmF1dGhvcn06YCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJ5OiAobXNnOiBNZXNzYWdlKSA9PiBgUHJvdmlkZSBhIHZhbGlkIHVzZXIgdG8gdW5iYW4sICR7bXNnLmF1dGhvcn06YFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGV4ZWMobWVzc2FnZTogTWVzc2FnZSwgdXNlcjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgbGV0IFVzZXIgPSBTdHJpbmcodXNlclsndXNlciddKVxuICAgICAgICBhd2FpdCBtZXNzYWdlLmd1aWxkLmZldGNoQmFucygpLnRoZW4oYXN5bmMgYmFucz0+IHtcbiAgICAgICAgICAgIGlmKGJhbnMuc2l6ZSA9PSAwIHx8IGJhbnMuZmluZCh1ID0+IHUudXNlci5pZCAhPSBVc2VyKSkgcmV0dXJuIG1lc3NhZ2UudXRpbC5zZW5kKCdObyBiYW4gd2l0aCB0aGUgc3BlY2lmaWVkIElEIGV4aXN0cy4nKTtcbiAgICAgICAgICAgIGVsc2UgbWVzc2FnZS5ndWlsZC5tZW1iZXJzLnVuYmFuKFVzZXIpOyByZXR1cm4gbWVzc2FnZS5jaGFubmVsLnNlbmQoYCR7VXNlcn0gdW5iYW5uZWQgc3VjY2VzZnVsbHkuYCk7XG4gICAgICAgIH0pO1xuXG4gICAgfTtcbn1cbiJdfQ==