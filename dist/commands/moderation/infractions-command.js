"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const discord_js_1 = require("discord.js");
const warns_1 = require("../../models/warns");
class InfractionsCommand extends discord_akairo_1.Command {
    constructor() {
        super('infractions', {
            aliases: ['infractions', 'infraq'],
            category: 'moderation',
            description: {
                content: 'Check for use infractions',
                usage: 'infractions <member>',
                examples: ['infractions @FadeDave#7005', 'infractions FadeDave'] //exampleArray
            },
            ratelimit: 6,
            userPermissions: ['MANAGE_MESSAGES'],
            channel: 'guild',
            args: [
                {
                    id: 'member',
                    type: 'member',
                    default: (msg) => msg.member
                }
            ]
        });
    }
    async exec(message, { member }) {
        const warnRepo = this.client.db.getRepository(warns_1.Warns);
        const warns = await warnRepo.find({ user: member.id, guild: message.guild.id });
        if (!warns.length)
            return message.util.reply(`No infractions found for ${member} `);
        const infractions = await Promise.all(warns.map(async (v, i) => {
            const mod = await this.client.users.fetch(v.moderator).catch(() => null);
            if (mod)
                return {
                    index: i + 1,
                    moderator: mod.tag,
                    time: (new Date(v.time * 1000)).toString().substr(4, 27),
                    reason: v.reason
                };
        }));
        return message.util.send(new discord_js_1.MessageEmbed()
            .setAuthor(`Infractions | ${member.user.username}`, member.user.displayAvatarURL())
            .setColor('RANDOM')
            .setDescription(infractions.map(v => `\`#${v.index}\` | Moderator: **${v.moderator}** | Recorded at: **${v.time}**\nReason: **\`${v.reason}\`**\n`))).catch(() => message.util.send('An unknown error has occurred.'));
    }
}
exports.default = InfractionsCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mcmFjdGlvbnMtY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9tb2RlcmF0aW9uL2luZnJhY3Rpb25zLWNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtREFBeUM7QUFDekMsMkNBQXFFO0FBR3JFLDhDQUEyQztBQUUzQyxNQUFxQixrQkFBbUIsU0FBUSx3QkFBTztJQUNuRDtRQUNJLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDakIsT0FBTyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQztZQUNsQyxRQUFRLEVBQUUsWUFBWTtZQUN0QixXQUFXLEVBQUU7Z0JBQ1QsT0FBTyxFQUFFLDJCQUEyQjtnQkFDcEMsS0FBSyxFQUFFLHNCQUFzQjtnQkFDN0IsUUFBUSxFQUFFLENBQUMsNEJBQTRCLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxjQUFjO2FBQ2xGO1lBQ0QsU0FBUyxFQUFFLENBQUM7WUFDWixlQUFlLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUNwQyxPQUFPLEVBQUUsT0FBTztZQUNoQixJQUFJLEVBQUU7Z0JBQ0Y7b0JBQ0ksRUFBRSxFQUFDLFFBQVE7b0JBQ1gsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsT0FBTyxFQUFFLENBQUMsR0FBWSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTTtpQkFDeEM7YUFDSjtTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQWdCLEVBQUUsRUFBQyxNQUFNLEVBQXdCO1FBQy9ELE1BQU0sUUFBUSxHQUFzQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBSyxDQUFDLENBQUM7UUFDeEUsTUFBTSxLQUFLLEdBQVksTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLDRCQUE0QixNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBRXBGLE1BQU0sV0FBVyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFRLEVBQUUsQ0FBUyxFQUFFLEVBQUU7WUFDMUUsTUFBTSxHQUFHLEdBQVMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvRSxJQUFJLEdBQUc7Z0JBQUUsT0FBTztvQkFDWixLQUFLLEVBQUUsQ0FBQyxHQUFDLENBQUM7b0JBQ1YsU0FBUyxFQUFFLEdBQUcsQ0FBQyxHQUFHO29CQUNsQixJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7b0JBQ3hELE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTTtpQkFDbkIsQ0FBQTtRQUNMLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFSixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUkseUJBQVksRUFBRTthQUN0QyxTQUFTLENBQUMsaUJBQWlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQ2xGLFFBQVEsQ0FBQyxRQUFRLENBQUM7YUFDbEIsY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLHFCQUFxQixDQUFDLENBQUMsU0FBUyx1QkFBdUIsQ0FBQyxDQUFDLElBQUksbUJBQW1CLENBQUMsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQ3ZKLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBQ0o7QUE1Q0QscUNBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gJ2Rpc2NvcmQtYWthaXJvJztcbmltcG9ydCB7IE1lc3NhZ2UsIEd1aWxkTWVtYmVyLCBVc2VyLCBNZXNzYWdlRW1iZWR9IGZyb20gJ2Rpc2NvcmQuanMnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuXG5pbXBvcnQgeyBXYXJucyB9IGZyb20gJy4uLy4uL21vZGVscy93YXJucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZnJhY3Rpb25zQ29tbWFuZCBleHRlbmRzIENvbW1hbmQge1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ2luZnJhY3Rpb25zJywgeyAvL25hbWVcbiAgICAgICAgICAgIGFsaWFzZXM6IFsnaW5mcmFjdGlvbnMnLCAnaW5mcmFxJ10sIC8vYWxpYXNlc1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdtb2RlcmF0aW9uJywgLy9jYXRlZ29yeSBvZiBjb21tYW5kXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdDaGVjayBmb3IgdXNlIGluZnJhY3Rpb25zJywgLy9kZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgIHVzYWdlOiAnaW5mcmFjdGlvbnMgPG1lbWJlcj4nLCAvL2hvdyB0byB1c2VcbiAgICAgICAgICAgICAgICBleGFtcGxlczogWydpbmZyYWN0aW9ucyBARmFkZURhdmUjNzAwNScsICdpbmZyYWN0aW9ucyBGYWRlRGF2ZSddIC8vZXhhbXBsZUFycmF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmF0ZWxpbWl0OiA2LCAvL2hvdyBtYW55IHRpbWVzIGNhbiB5b3UgZXhlY3V0ZSAvIG1pbnV0ZVxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zOiBbJ01BTkFHRV9NRVNTQUdFUyddLFxuICAgICAgICAgICAgY2hhbm5lbDogJ2d1aWxkJyxcbiAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOidtZW1iZXInLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogKG1zZzogTWVzc2FnZSkgPT4gbXNnLm1lbWJlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UsIHttZW1iZXJ9OiB7bWVtYmVyOiBHdWlsZE1lbWJlcn0pOiBQcm9taXNlPE1lc3NhZ2U+IHtcbiAgICAgICAgY29uc3Qgd2FyblJlcG86IFJlcG9zaXRvcnk8V2FybnM+ID0gdGhpcy5jbGllbnQuZGIuZ2V0UmVwb3NpdG9yeShXYXJucyk7XG4gICAgICAgIGNvbnN0IHdhcm5zOiBXYXJuc1tdID0gYXdhaXQgd2FyblJlcG8uZmluZCh7IHVzZXI6IG1lbWJlci5pZCwgZ3VpbGQ6IG1lc3NhZ2UuZ3VpbGQuaWR9KTtcblxuICAgICAgICBpZiAoIXdhcm5zLmxlbmd0aCkgcmV0dXJuIG1lc3NhZ2UudXRpbC5yZXBseShgTm8gaW5mcmFjdGlvbnMgZm91bmQgZm9yICR7bWVtYmVyfSBgKTtcblxuICAgICAgICBjb25zdCBpbmZyYWN0aW9ucyA9IGF3YWl0IFByb21pc2UuYWxsKHdhcm5zLm1hcChhc3luYyAodjogV2FybnMsIGk6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9kOiBVc2VyID0gYXdhaXQgdGhpcy5jbGllbnQudXNlcnMuZmV0Y2godi5tb2RlcmF0b3IpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICAgICAgaWYgKG1vZCkgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbmRleDogaSsxLFxuICAgICAgICAgICAgICAgIG1vZGVyYXRvcjogbW9kLnRhZyxcbiAgICAgICAgICAgICAgICB0aW1lOiAobmV3IERhdGUodi50aW1lICogMTAwMCkpLnRvU3RyaW5nKCkuc3Vic3RyKDQsIDI3KSxcbiAgICAgICAgICAgICAgICByZWFzb246IHYucmVhc29uXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gbWVzc2FnZS51dGlsLnNlbmQobmV3IE1lc3NhZ2VFbWJlZCgpXG4gICAgICAgICAgICAuc2V0QXV0aG9yKGBJbmZyYWN0aW9ucyB8ICR7bWVtYmVyLnVzZXIudXNlcm5hbWV9YCwgbWVtYmVyLnVzZXIuZGlzcGxheUF2YXRhclVSTCgpKVxuICAgICAgICAgICAgLnNldENvbG9yKCdSQU5ET00nKVxuICAgICAgICAgICAgLnNldERlc2NyaXB0aW9uKGluZnJhY3Rpb25zLm1hcCh2ID0+IGBcXGAjJHt2LmluZGV4fVxcYCB8IE1vZGVyYXRvcjogKioke3YubW9kZXJhdG9yfSoqIHwgUmVjb3JkZWQgYXQ6ICoqJHt2LnRpbWV9KipcXG5SZWFzb246ICoqXFxgJHt2LnJlYXNvbn1cXGAqKlxcbmApKVxuICAgICAgICApLmNhdGNoKCgpID0+IG1lc3NhZ2UudXRpbC5zZW5kKCdBbiB1bmtub3duIGVycm9yIGhhcyBvY2N1cnJlZC4nKSk7XG4gICAgfVxufVxuIl19